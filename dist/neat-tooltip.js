/// <reference path="typings/tsd.d.ts" />
var Tooltip;
(function (_Tooltip) {
    _Tooltip.activeTooltips = [];
    (function (Position) {
        Position[Position["bottom"] = 0] = "bottom";
        Position[Position["top"] = 1] = "top";
    })(_Tooltip.Position || (_Tooltip.Position = {}));
    var Position = _Tooltip.Position;
    (function (Source) {
        //Get tooltip content from title attribute
        Source[Source["title"] = 0] = "title";
        // Get tooltip content from anchor attribute. If anchor starts with #, will searh for element on the page.
        // Else (not yet supported), will load URL
        Source[Source["anchor"] = 1] = "anchor";
    })(_Tooltip.Source || (_Tooltip.Source = {}));
    var Source = _Tooltip.Source;
    (function (ShowOn) {
        ShowOn[ShowOn["hover"] = 0] = "hover";
        ShowOn[ShowOn["click"] = 1] = "click";
    })(_Tooltip.ShowOn || (_Tooltip.ShowOn = {}));
    var ShowOn = _Tooltip.ShowOn;
    function close() {
        for (var i = 0; i < _Tooltip.activeTooltips.length; i++)
            _Tooltip.activeTooltips[i].close();
    }
    //Indicates if a jquery set contains a given DOM node
    function $contains(e, elem, includeSelf) {
        if (includeSelf === void 0) { includeSelf = true; }
        for (var i = 0; i < e.length; i++) {
            if ((includeSelf && e.get(i) == elem) || $.contains(e.get(i), elem))
                return true;
        }
        return false;
    }
    ;
    (function ($) {
        //Display a tooltip once
        $.fn.showTooltip = function (options) {
            return this.each(function () {
                new Tooltip(this, options);
            });
        };
        //Display a tooltip once
        $.fn.closeTooltip = function (options) {
            return this.each(function () {
                var t = $(this).data('tooltip');
                if (t)
                    t.close();
            });
        };
        //Bind tooltip display to event
        $.fn.tooltip = function (options, showOn) {
            if (showOn === void 0) { showOn = 0 /* hover */; }
            if (showOn == 0 /* hover */) {
                var show = function () {
                    $(this).showTooltip(options);
                };
                this.hover(show, function () {
                    $(this).closeTooltip();
                }).click(show);
            }
            else if (showOn == 1 /* click */) {
                this.click(function () {
                    var e = $(this);
                    console.log(e.data('tooltip'));
                    if (e.data('tooltip'))
                        e.closeTooltip();
                    else
                        e.showTooltip(options);
                    return false;
                });
            }
            return this;
        };
        //Hide tooltip on click outside target element and popup
        $('html').click(function (ev) {
            for (var i = 0; i < _Tooltip.activeTooltips.length; i++) {
                var t = _Tooltip.activeTooltips[i];
                var $active = t.tooltip.add(t.target);
                if (t && !$contains($active, ev.target))
                    t.close();
            }
        });
        $(window).resize(function () {
            for (var i = 0; i < _Tooltip.activeTooltips.length; i++) {
                _Tooltip.activeTooltips[i].position();
            }
        });
    })(jQuery);
    var Tooltip = (function () {
        function Tooltip(targetElem, options) {
            var _this = this;
            this.targetElem = targetElem;
            this.options = options;
            this.closeCallback = function () {
                _this.close();
                return false;
            };
            this.options = $.extend({
                position: 0 /* bottom */,
                source: 0 /* title */,
                cssClass: '',
                closeSelector: '.tooltip-close',
                distance: 5,
                allowMultiple: false
            }, options);
            this.target = $(targetElem).addClass('has-tooltip').closeTooltip().data('tooltip', this);
            this.show();
        }
        Tooltip.prototype.getContent = function () {
            var c = this.options.content;
            if (c) {
                c = $.isFunction(c) ? c() : c;
                return typeof c == 'string' ? $('<div>').html(c) : $(c);
            }
            if (this.options.source == 0 /* title */) {
                var title = this.target.attr('title') || this.target.data('title');
                this.target.attr('title', '').data('title', title);
                return $('<div>').html(title);
            }
            if (this.options.source == 1 /* anchor */) {
                var content = $(this.target.attr('href'));
                return content.length ? content : null;
            }
        };
        Tooltip.prototype.toggle = function () {
            if (this.tooltip)
                this.close();
            else
                this.show();
        };
        Tooltip.prototype.show = function () {
            this.content = this.getContent();
            if (!this.content)
                return;
            if (!this.options.allowMultiple)
                close();
            this.content.off('click', this.closeCallback).on('click', this.options.closeSelector, this.closeCallback);
            var o = this.options;
            this.tooltip = $('<div class="tooltip-frame"/>').addClass(o.cssClass).addClass('tooltip-' + Position[o.position]).append(this.content.show()).append($('<div class="tip"/>')).appendTo('body');
            _Tooltip.activeTooltips.push(this);
            this.position();
        };
        Tooltip.prototype.position = function () {
            var margin = 10;
            var t = this.tooltip;
            var e = this.target;
            var o = this.options;
            if (!t)
                return;
            //Reset so dimentions calculations are correct
            t.removeAttr('style');
            var offset = e.offset();
            var ww = $(window).width();
            var w = t.outerWidth();
            var left = offset.left + e.outerWidth() / 2 - w / 2;
            if (left < margin)
                left = margin;
            var rightOverflow = (left + w) - (ww - margin);
            if (rightOverflow > 0)
                left = Math.max(left - rightOverflow, margin);
            t.css({
                'left': left + 'px',
                'max-width': (ww - left - margin) + 'px'
            }).find('.tip').css('left', offset.left + e.outerWidth() / 2 - left + 'px');
            //Setting width can make height vary. So we set vertical position after.
            var h = t.outerHeight();
            t.css('top', o.position == 1 /* top */ ? offset.top - h - o.distance : offset.top + e.outerHeight() + o.distance);
        };
        Tooltip.prototype.close = function () {
            console.log('close22');
            if (!this.tooltip)
                return;
            if (this.options.source == 1 /* anchor */)
                this.content.hide().appendTo('body');
            this.tooltip.remove();
            this.tooltip = null;
            this.target.data('tooltip', null);
            _Tooltip.activeTooltips.splice(_Tooltip.activeTooltips.indexOf(this), 1);
        };
        return Tooltip;
    })();
    _Tooltip.Tooltip = Tooltip;
})(Tooltip || (Tooltip = {}));

//# sourceMappingURL=data:application/json;base64,