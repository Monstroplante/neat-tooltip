/// <reference path="typings/tsd.d.ts" />
var Tooltip;
(function (_Tooltip) {
    _Tooltip.activeTooltips = [];
    function close() {
        for (var i = 0; i < _Tooltip.activeTooltips.length; i++)
            _Tooltip.activeTooltips[i].close();
    }
    //Indicates if a jquery set contains a given DOM node
    function $contains(e, elem, includeSelf) {
        if (includeSelf === void 0) { includeSelf = true; }
        for (var i = 0; i < e.length; i++) {
            if ((includeSelf && e.get(i) == elem) || $.contains(e.get(i), elem))
                return true;
        }
        return false;
    }
    ;
    (function ($) {
        //Display a tooltip once
        $.fn.showTooltip = function (options) {
            return this.each(function () {
                new Tooltip(this, options);
            });
        };
        //Display a tooltip once
        $.fn.closeTooltip = function (options) {
            return this.each(function () {
                var t = $(this).data('_tooltip');
                if (t)
                    t.close();
            });
        };
        //Bind tooltip display to event
        $.fn.tooltip = function (options, showOn, selector) {
            if (showOn === void 0) { showOn = 'hover'; }
            if (showOn == 'hover') {
                var show = function () {
                    $(this).showTooltip(options);
                };
                this.on('mouseenter', selector, show).on('mouseleave', selector, function () {
                    $(this).closeTooltip();
                }).on('click', selector, show);
            }
            else if (showOn == 'click') {
                this.on('click', selector, function () {
                    var e = $(this);
                    if (e.data('_tooltip'))
                        e.closeTooltip();
                    else
                        e.showTooltip(options);
                    return false;
                });
            }
            else {
                throw 'This value is not supported for argument showOn: ' + showOn;
            }
            return this;
        };
        //Hide tooltip on click outside target element and popup
        $('html').click(function (ev) {
            for (var i = 0; i < _Tooltip.activeTooltips.length; i++) {
                var t = _Tooltip.activeTooltips[i];
                var $active = t.tooltip.add(t.target);
                if (t && t.options.closeOnClickOuside && !$contains($active, ev.target))
                    t.close();
            }
        });
        $(window).resize(function () {
            for (var i = 0; i < _Tooltip.activeTooltips.length; i++) {
                _Tooltip.activeTooltips[i].position();
            }
        });
    })(jQuery);
    var Tooltip = (function () {
        function Tooltip(targetElem, options) {
            var _this = this;
            this.targetElem = targetElem;
            this.options = options;
            this.closeCallback = function () {
                _this.close();
                return false;
            };
            this.options = $.extend({
                position: 'bottom',
                source: 'title',
                cssClass: '',
                closeSelector: '.tooltip-close',
                distance: 5,
                allowMultiple: false,
                closeOnClickOuside: true
            }, options);
            this.target = $(targetElem).addClass('has-tooltip').closeTooltip().data('_tooltip', this);
            this.show();
        }
        Tooltip.prototype.getContent = function () {
            var c = this.options.content;
            if (c) {
                c = $.isFunction(c) ? c.call(this.target) : c;
                return !c ? null : typeof c == 'string' ? $('<div>').html(c) : $(c);
            }
            if (this.options.source == 'title') {
                var title = this.target.attr('title') || this.target.data('title');
                this.target.attr('title', '').data('title', title);
                return $('<div>').html(title);
            }
            if (this.options.source == 'anchor') {
                var content = $(this.target.attr('href'));
                return content.length ? content : null;
            }
        };
        Tooltip.prototype.show = function () {
            this.content = this.getContent();
            if (!this.content)
                return;
            if (!this.options.allowMultiple)
                close();
            this.content.off('click', this.closeCallback).on('click', this.options.closeSelector, this.closeCallback);
            var o = this.options;
            this.tooltip = $('<div class="tooltip-frame"/>').addClass(o.cssClass).addClass('tooltip-' + o.position).append(this.content.show()).append($('<div class="tip"/>')).appendTo('body');
            _Tooltip.activeTooltips.push(this);
            this.position();
        };
        Tooltip.prototype.position = function () {
            var margin = 10;
            var t = this.tooltip;
            var e = this.target;
            var o = this.options;
            if (!t)
                return;
            //Reset so dimentions calculations are correct
            t.removeAttr('style');
            var offset = e.offset();
            var ww = $(window).width();
            var w = t.outerWidth();
            var left = offset.left + e.outerWidth() / 2 - w / 2;
            if (left < margin)
                left = margin;
            var rightOverflow = (left + w) - (ww - margin);
            if (rightOverflow > 0)
                left = Math.max(left - rightOverflow, margin);
            t.css({
                'left': left + 'px',
                'max-width': (ww - left - margin) + 'px'
            }).find('.tip').css('left', offset.left + e.outerWidth() / 2 - left + 'px');
            //Setting width can make height vary. So we set vertical position after.
            var h = t.outerHeight();
            t.css('top', o.position == 'top' ? offset.top - h - o.distance : offset.top + e.outerHeight() + o.distance);
        };
        Tooltip.prototype.close = function () {
            if (!this.tooltip)
                return;
            if (this.options.source == 'anchor')
                this.content.hide().appendTo('body');
            this.tooltip.remove();
            this.tooltip = null;
            this.target.data('_tooltip', null);
            _Tooltip.activeTooltips.splice(_Tooltip.activeTooltips.indexOf(this), 1);
        };
        return Tooltip;
    })();
    _Tooltip.Tooltip = Tooltip;
})(Tooltip || (Tooltip = {}));

//# sourceMappingURL=data:application/json;base64,