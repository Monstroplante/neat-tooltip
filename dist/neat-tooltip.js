/// <reference path="typings/tsd.d.ts" />
var Tooltip;
(function (_Tooltip) {
    _Tooltip.activeTooltips = [];
    function close() {
        for (var i = 0; i < _Tooltip.activeTooltips.length; i++)
            _Tooltip.activeTooltips[i].close();
    }
    //Indicates if a jquery set contains a given DOM node
    function $contains(e, elem, includeSelf) {
        if (includeSelf === void 0) { includeSelf = true; }
        for (var i = 0; i < e.length; i++) {
            if ((includeSelf && e.get(i) == elem) || $.contains(e.get(i), elem))
                return true;
        }
        return false;
    }
    ;
    (function ($) {
        //Display a tooltip once
        $.fn.showTooltip = function (options) {
            return this.each(function () {
                new Tooltip(this, options);
            });
        };
        //Display a tooltip once
        $.fn.closeTooltip = function (options) {
            return this.each(function () {
                var t = $(this).data('_tooltip');
                if (t)
                    t.close();
            });
        };
        //Bind tooltip display to event
        $.fn.tooltip = function (options, showOn, selector) {
            if (showOn === void 0) { showOn = 'hover'; }
            if (showOn == 'hover') {
                var show = function () {
                    $(this).showTooltip(options);
                };
                this.on('mouseenter', selector, show).on('mouseleave', selector, function () {
                    $(this).closeTooltip();
                }).on('click', selector, show);
            }
            else if (showOn == 'click') {
                this.on('click', selector, function () {
                    var e = $(this);
                    if (e.data('_tooltip'))
                        e.closeTooltip();
                    else
                        e.showTooltip(options);
                    return false;
                });
            }
            else {
                throw 'This value is not supported for argument showOn: ' + showOn;
            }
            return this;
        };
        //Hide tooltip on click outside target element and popup
        $('html').click(function (ev) {
            for (var i = 0; i < _Tooltip.activeTooltips.length; i++) {
                var t = _Tooltip.activeTooltips[i];
                var $active = t.tooltip.add(t.target);
                if (t && t.options.closeOnClickOuside && !$contains($active, ev.target))
                    t.close();
            }
        });
        $(window).resize(function () {
            for (var i = 0; i < _Tooltip.activeTooltips.length; i++) {
                _Tooltip.activeTooltips[i].position();
            }
        });
    })(jQuery);
    var Tooltip = (function () {
        function Tooltip(targetElem, options) {
            var _this = this;
            this.targetElem = targetElem;
            this.options = options;
            this.closeCallback = function () {
                _this.close();
                return false;
            };
            this.options = $.extend({
                position: 'bottom',
                source: 'title',
                cssClass: '',
                closeSelector: '.tooltip-close',
                distance: 5,
                allowMultiple: false,
                closeOnClickOuside: true,
                delay: 200,
                container: window
            }, options);
            this.target = $(targetElem).addClass('has-tooltip').closeTooltip().data('_tooltip', this);
            this.showTimeout = setTimeout(function () { return _this.show(); }, this.options.delay);
        }
        Tooltip.prototype.getContent = function () {
            var c = this.options.content;
            if (c) {
                c = $.isFunction(c) ? c.call(this.target) : c;
                return !c ? null : typeof c == 'string' ? $('<div>').html(c) : $(c);
            }
            if (this.options.source == 'title') {
                var title = this.target.attr('title') || this.target.data('title');
                this.target.attr('title', '').data('title', title);
                return $('<div>').html(title);
            }
            if (this.options.source == 'anchor') {
                var content = $(this.target.attr('href'));
                return content.length ? content : null;
            }
        };
        Tooltip.prototype.show = function () {
            this.content = this.getContent();
            if (!this.content)
                return;
            if (!this.options.allowMultiple)
                close();
            this.content.off('click', this.closeCallback).on('click', this.options.closeSelector, this.closeCallback);
            var o = this.options;
            this.tooltip = $('<div class="tooltip-frame"/>').addClass(o.cssClass).addClass('tooltip-' + o.position).append(this.content.show()).append($('<div class="tip"/>')).appendTo('body');
            _Tooltip.activeTooltips.push(this);
            this.position();
        };
        Tooltip.prototype.position = function () {
            var margin = 10;
            var t = this.tooltip;
            var e = this.target;
            var o = this.options;
            if (!t)
                return;
            //Reset so dimentions calculations are correct
            t.removeAttr('style');
            var offset = e.offset();
            var container = this.options.container;
            var cw = $(container).width();
            var cl = container === window ? 0 : $(container).offset().left;
            var cr = cl + cw;
            var w = t.outerWidth();
            var left = offset.left + e.outerWidth() / 2 - w / 2;
            if (left - margin < cl)
                left = cl + margin;
            var rightOverflow = (left + w) - (cr - margin);
            if (rightOverflow > 0)
                left = Math.max(left - rightOverflow, cl + margin);
            t.css({
                'left': left + 'px',
                'max-width': (cr - left - margin) + 'px'
            }).find('.tip').css('left', offset.left + e.outerWidth() / 2 - left + 'px');
            //Setting width can make height vary. So we set vertical position after.
            var h = t.outerHeight();
            t.css('top', o.position == 'top' ? offset.top - h - o.distance : offset.top + e.outerHeight() + o.distance);
        };
        Tooltip.prototype.close = function () {
            clearTimeout(this.showTimeout);
            if (!this.tooltip)
                return;
            if (this.options.source == 'anchor')
                this.content.hide().appendTo('body');
            this.tooltip.remove();
            this.tooltip = null;
            this.target.data('_tooltip', null);
            _Tooltip.activeTooltips.splice(_Tooltip.activeTooltips.indexOf(this), 1);
        };
        return Tooltip;
    })();
    _Tooltip.Tooltip = Tooltip;
})(Tooltip || (Tooltip = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5lYXQtdG9vbHRpcC50cyJdLCJuYW1lcyI6WyJUb29sdGlwIiwiVG9vbHRpcC5jbG9zZSIsIlRvb2x0aXAuJGNvbnRhaW5zIiwiVG9vbHRpcC5Ub29sdGlwIiwiVG9vbHRpcC5Ub29sdGlwLmNvbnN0cnVjdG9yIiwiVG9vbHRpcC5Ub29sdGlwLmdldENvbnRlbnQiLCJUb29sdGlwLlRvb2x0aXAuc2hvdyIsIlRvb2x0aXAuVG9vbHRpcC5wb3NpdGlvbiIsIlRvb2x0aXAuVG9vbHRpcC5jbG9zZSJdLCJtYXBwaW5ncyI6IkFBQUEseUNBQXlDO0FBSXpDLElBQU8sT0FBTyxDQXlNYjtBQXpNRCxXQUFPLFFBQU8sRUFBQyxDQUFDO0lBQ0RBLHVCQUFjQSxHQUFjQSxFQUFFQSxDQUFDQTtJQUUxQ0EsU0FBU0EsS0FBS0E7UUFDVkMsR0FBR0EsQ0FBQUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBQ0EsdUJBQWNBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBO1lBQ3JDQSx1QkFBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7SUFDbENBLENBQUNBO0lBRURELEFBQ0FBLHFEQURxREE7YUFDNUNBLFNBQVNBLENBQUNBLENBQVNBLEVBQUVBLElBQWlCQSxFQUFFQSxXQUFrQkE7UUFBbEJFLDJCQUFrQkEsR0FBbEJBLGtCQUFrQkE7UUFDL0RBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQ2hDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxXQUFXQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDaEVBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ3BCQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtJQUNqQkEsQ0FBQ0E7SUFBQUYsQ0FBQ0E7SUFFRkEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7UUFFUixBQUNBLHdCQUR3QjtRQUN4QixDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsR0FBRyxVQUFVLE9BQU87WUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Z0JBQ2IsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQy9CLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDO1FBRUYsQUFDQSx3QkFEd0I7UUFDeEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEdBQUcsVUFBVSxPQUFPO1lBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNiLElBQUksQ0FBQyxHQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQztvQkFDRCxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUM7UUFFRixBQUNBLCtCQUQrQjtRQUMvQixDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxVQUFVLE9BQU8sRUFBRSxNQUFnQixFQUFFLFFBQWdCO1lBQWxDLHNCQUFnQixHQUFoQixnQkFBZ0I7WUFDOUMsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksSUFBSSxHQUFHO29CQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUE7Z0JBQUMsQ0FBQyxDQUFDO2dCQUN4RCxJQUFJLENBQ0MsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQ2hDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFO29CQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtnQkFBQSxDQUFDLENBQUMsQ0FDOUQsRUFBRSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFckMsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUEsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFO29CQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ2hCLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7d0JBQ2xCLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztvQkFDckIsSUFBSTt3QkFDQSxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUNqQixDQUFDLENBQUMsQ0FBQztZQUNQLENBQUM7WUFBQSxJQUFJLENBQUEsQ0FBQztnQkFDRixNQUFNLG1EQUFtRCxHQUFHLE1BQU0sQ0FBQztZQUN2RSxDQUFDO1lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUM7UUFFRixBQUNBLHdEQUR3RDtRQUN4RCxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRTtZQUN4QixHQUFHLENBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsdUJBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUMsQ0FBQztnQkFDdkMsSUFBSSxDQUFDLEdBQVcsdUJBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNwRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEIsQ0FBQztRQUVMLENBQUMsQ0FBQyxDQUFDO1FBRUgsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNiLEdBQUcsQ0FBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyx1QkFBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBQyxDQUFDO2dCQUN2Qyx1QkFBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2pDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFFWEEsSUFBYUEsT0FBT0E7UUFPaEJHLFNBUFNBLE9BQU9BLENBT0lBLFVBQXVCQSxFQUFTQSxPQUF3QkE7WUFQaEZDLGlCQTBIQ0E7WUFuSHVCQSxlQUFVQSxHQUFWQSxVQUFVQSxDQUFhQTtZQUFTQSxZQUFPQSxHQUFQQSxPQUFPQSxDQUFpQkE7WUFIcEVBLGtCQUFhQSxHQUFHQTtnQkFBUUEsS0FBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7Z0JBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1lBQUNBLENBQUNBLENBQUNBO1lBSTFEQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQTtnQkFDcEJBLFFBQVFBLEVBQUVBLFFBQVFBO2dCQUNsQkEsTUFBTUEsRUFBRUEsT0FBT0E7Z0JBQ2ZBLFFBQVFBLEVBQUVBLEVBQUVBO2dCQUNaQSxhQUFhQSxFQUFFQSxnQkFBZ0JBO2dCQUMvQkEsUUFBUUEsRUFBRUEsQ0FBQ0E7Z0JBQ1hBLGFBQWFBLEVBQUVBLEtBQUtBO2dCQUNwQkEsa0JBQWtCQSxFQUFFQSxJQUFJQTtnQkFDeEJBLEtBQUtBLEVBQUVBLEdBQUdBO2dCQUNWQSxTQUFTQSxFQUFFQSxNQUFNQTthQUNwQkEsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFFWkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDMUZBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLFVBQVVBLENBQUNBLGNBQU1BLE9BQUFBLEtBQUlBLENBQUNBLElBQUlBLEVBQUVBLEVBQVhBLENBQVdBLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBQ3pFQSxDQUFDQTtRQUVPRCw0QkFBVUEsR0FBbEJBO1lBQ0lFLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBO1lBQzdCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDSkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzlDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxPQUFPQSxDQUFDQSxJQUFJQSxRQUFRQSxHQUFJQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN6RUEsQ0FBQ0E7WUFHREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsSUFBSUEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2pDQSxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtnQkFDbkVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO2dCQUNuREEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDbENBLENBQUNBO1lBQ0RBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLElBQUlBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO2dCQUNsQ0EsSUFBSUEsT0FBT0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxHQUFHQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUMzQ0EsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFFT0Ysc0JBQUlBLEdBQVpBO1lBQ0lHLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBO1lBQ2pDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQTtnQkFDZEEsTUFBTUEsQ0FBQ0E7WUFFWEEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FB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LE1BQU1BLElBQUlBLFFBQVFBLENBQUNBO2dCQUMvQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFDekNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1lBQ3RCQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUNwQkEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLHVCQUFjQSxDQUFDQSxNQUFNQSxDQUFDQSx1QkFBY0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDM0RBLENBQUNBO1FBQ0xMLGNBQUNBO0lBQURBLENBMUhBSCxBQTBIQ0csSUFBQUg7SUExSFlBLGdCQUFPQSxHQUFQQSxPQTBIWkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF6TU0sT0FBTyxLQUFQLE9BQU8sUUF5TWIiLCJmaWxlIjoibmVhdC10b29sdGlwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cInR5cGluZ3MvdHNkLmQudHNcIiAvPlxyXG5cclxuXHJcblxyXG5tb2R1bGUgVG9vbHRpcCB7XHJcbiAgICBleHBvcnQgdmFyIGFjdGl2ZVRvb2x0aXBzOiBUb29sdGlwW10gPSBbXTtcclxuXHJcbiAgICBmdW5jdGlvbiBjbG9zZSgpIHtcclxuICAgICAgICBmb3IodmFyIGk9MDsgaTxhY3RpdmVUb29sdGlwcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgYWN0aXZlVG9vbHRpcHNbaV0uY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvL0luZGljYXRlcyBpZiBhIGpxdWVyeSBzZXQgY29udGFpbnMgYSBnaXZlbiBET00gbm9kZVxyXG4gICAgZnVuY3Rpb24gJGNvbnRhaW5zKGU6IEpRdWVyeSwgZWxlbTogSFRNTEVsZW1lbnQsIGluY2x1ZGVTZWxmID0gdHJ1ZSkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoKGluY2x1ZGVTZWxmICYmIGUuZ2V0KGkpID09IGVsZW0pIHx8ICQuY29udGFpbnMoZS5nZXQoaSksIGVsZW0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgKGZ1bmN0aW9uICgkKSB7XHJcblxyXG4gICAgICAgIC8vRGlzcGxheSBhIHRvb2x0aXAgb25jZVxyXG4gICAgICAgICQuZm4uc2hvd1Rvb2x0aXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBuZXcgVG9vbHRpcCh0aGlzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9EaXNwbGF5IGEgdG9vbHRpcCBvbmNlXHJcbiAgICAgICAgJC5mbi5jbG9zZVRvb2x0aXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgdCA9IDxUb29sdGlwPiQodGhpcykuZGF0YSgnX3Rvb2x0aXAnKTtcclxuICAgICAgICAgICAgICAgIGlmKHQpXHJcbiAgICAgICAgICAgICAgICAgICAgdC5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL0JpbmQgdG9vbHRpcCBkaXNwbGF5IHRvIGV2ZW50XHJcbiAgICAgICAgJC5mbi50b29sdGlwID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNob3dPbiA9ICdob3ZlcicsIHNlbGVjdG9yPzpzdHJpbmcpIHtcclxuICAgICAgICAgICAgaWYgKHNob3dPbiA9PSAnaG92ZXInKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2hvdyA9IGZ1bmN0aW9uICgpIHsgJCh0aGlzKS5zaG93VG9vbHRpcChvcHRpb25zKSB9O1xyXG4gICAgICAgICAgICAgICAgdGhpc1xyXG4gICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlcicsIHNlbGVjdG9yLCBzaG93KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZScsIHNlbGVjdG9yLCBmdW5jdGlvbigpeyQodGhpcykuY2xvc2VUb29sdGlwKCl9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCBzZWxlY3Rvciwgc2hvdyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNob3dPbiA9PSAnY2xpY2snKXtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oJ2NsaWNrJywgc2VsZWN0b3IsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZS5kYXRhKCdfdG9vbHRpcCcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNsb3NlVG9vbHRpcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zaG93VG9vbHRpcChvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyAnVGhpcyB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkIGZvciBhcmd1bWVudCBzaG93T246ICcgKyBzaG93T247XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vSGlkZSB0b29sdGlwIG9uIGNsaWNrIG91dHNpZGUgdGFyZ2V0IGVsZW1lbnQgYW5kIHBvcHVwXHJcbiAgICAgICAgJCgnaHRtbCcpLmNsaWNrKGZ1bmN0aW9uIChldikge1xyXG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxhY3RpdmVUb29sdGlwcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICB2YXIgdDpUb29sdGlwID0gYWN0aXZlVG9vbHRpcHNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgJGFjdGl2ZSA9IHQudG9vbHRpcC5hZGQodC50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgJiYgdC5vcHRpb25zLmNsb3NlT25DbGlja091c2lkZSAmJiAhJGNvbnRhaW5zKCRhY3RpdmUsIGV2LnRhcmdldCkpXHJcbiAgICAgICAgICAgICAgICAgICAgdC5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKHdpbmRvdykucmVzaXplKCgpID0+IHtcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8YWN0aXZlVG9vbHRpcHMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcHNbaV0ucG9zaXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSkoalF1ZXJ5KTtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVG9vbHRpcCB7XHJcbiAgICAgICAgcHVibGljIHRvb2x0aXA6IEpRdWVyeTtcclxuICAgICAgICBwdWJsaWMgdGFyZ2V0OiBKUXVlcnk7XHJcbiAgICAgICAgcHVibGljIGNvbnRlbnQ6IEpRdWVyeTtcclxuICAgICAgICBwcml2YXRlIGNsb3NlQ2FsbGJhY2sgPSAoKSA9PiB7IHRoaXMuY2xvc2UoKTsgcmV0dXJuIGZhbHNlOyB9O1xyXG4gICAgICAgIHByaXZhdGUgc2hvd1RpbWVvdXQ7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFyZ2V0RWxlbTogSFRNTEVsZW1lbnQsIHB1YmxpYyBvcHRpb25zOiB0b29sdGlwX29wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxyXG4gICAgICAgICAgICAgICAgc291cmNlOiAndGl0bGUnLFxyXG4gICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICcnLFxyXG4gICAgICAgICAgICAgICAgY2xvc2VTZWxlY3RvcjogJy50b29sdGlwLWNsb3NlJyxcclxuICAgICAgICAgICAgICAgIGRpc3RhbmNlOiA1LFxyXG4gICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjbG9zZU9uQ2xpY2tPdXNpZGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBkZWxheTogMjAwLFxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiB3aW5kb3csXHJcbiAgICAgICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSAkKHRhcmdldEVsZW0pLmFkZENsYXNzKCdoYXMtdG9vbHRpcCcpLmNsb3NlVG9vbHRpcCgpLmRhdGEoJ190b29sdGlwJywgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2hvdygpLCB0aGlzLm9wdGlvbnMuZGVsYXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXRDb250ZW50KCk6IEpRdWVyeSB7XHJcbiAgICAgICAgICAgIHZhciBjID0gdGhpcy5vcHRpb25zLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgIGlmIChjKSB7XHJcbiAgICAgICAgICAgICAgICBjID0gJC5pc0Z1bmN0aW9uKGMpID8gYy5jYWxsKHRoaXMudGFyZ2V0KSA6IGM7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIWMgPyBudWxsIDogdHlwZW9mIGMgPT0gJ3N0cmluZycgPyAgJCgnPGRpdj4nKS5odG1sKGMpIDogJChjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNvdXJjZSA9PSAndGl0bGUnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLnRhcmdldC5hdHRyKCd0aXRsZScpIHx8IHRoaXMudGFyZ2V0LmRhdGEoJ3RpdGxlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5hdHRyKCd0aXRsZScsICcnKS5kYXRhKCd0aXRsZScsIHRpdGxlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkKCc8ZGl2PicpLmh0bWwodGl0bGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc291cmNlID09ICdhbmNob3InKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9ICQodGhpcy50YXJnZXQuYXR0cignaHJlZicpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50Lmxlbmd0aCA/IGNvbnRlbnQgOiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHNob3coKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudCA9IHRoaXMuZ2V0Q29udGVudCgpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMuYWxsb3dNdWx0aXBsZSlcclxuICAgICAgICAgICAgICAgIGNsb3NlKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrJywgdGhpcy5jbG9zZUNhbGxiYWNrKVxyXG4gICAgICAgICAgICAgICAgLm9uKCdjbGljaycsIHRoaXMub3B0aW9ucy5jbG9zZVNlbGVjdG9yLCB0aGlzLmNsb3NlQ2FsbGJhY2spO1xyXG5cclxuICAgICAgICAgICAgdmFyIG8gPSB0aGlzLm9wdGlvbnM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAgPSAkKCc8ZGl2IGNsYXNzPVwidG9vbHRpcC1mcmFtZVwiLz4nKVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKG8uY3NzQ2xhc3MpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3Rvb2x0aXAtJyArIG8ucG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKHRoaXMuY29udGVudC5zaG93KCkpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXYgY2xhc3M9XCJ0aXBcIi8+JykpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJ2JvZHknKTtcclxuXHJcbiAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXBzLnB1c2godGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBwb3NpdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIG1hcmdpbiA9IDEwO1xyXG5cclxuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnRvb2x0aXA7XHJcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy50YXJnZXQ7XHJcbiAgICAgICAgICAgIHZhciBvID0gdGhpcy5vcHRpb25zO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy9SZXNldCBzbyBkaW1lbnRpb25zIGNhbGN1bGF0aW9ucyBhcmUgY29ycmVjdFxyXG4gICAgICAgICAgICB0LnJlbW92ZUF0dHIoJ3N0eWxlJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gZS5vZmZzZXQoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLm9wdGlvbnMuY29udGFpbmVyO1xyXG5cclxuICAgICAgICAgICAgdmFyIGN3ID0gJChjb250YWluZXIpLndpZHRoKCk7XHJcbiAgICAgICAgICAgIHZhciBjbCA9IGNvbnRhaW5lciA9PT0gIHdpbmRvdyA/IDAgOiAkKGNvbnRhaW5lcikub2Zmc2V0KCkubGVmdDtcclxuICAgICAgICAgICAgdmFyIGNyID0gY2wgKyBjdztcclxuICAgICAgICAgICAgdmFyIHcgPSB0Lm91dGVyV2lkdGgoKTtcclxuICAgICAgICAgICAgdmFyIGxlZnQgPSBvZmZzZXQubGVmdCArIGUub3V0ZXJXaWR0aCgpIC8gMiAtIHcgLyAyO1xyXG5cclxuICAgICAgICAgICAgaWYgKGxlZnQgLSBtYXJnaW4gPCBjbClcclxuICAgICAgICAgICAgICAgIGxlZnQgPSBjbCArIG1hcmdpbjtcclxuICAgICAgICAgICAgdmFyIHJpZ2h0T3ZlcmZsb3cgPSAobGVmdCArIHcpIC0gKGNyIC0gbWFyZ2luKTtcclxuICAgICAgICAgICAgaWYocmlnaHRPdmVyZmxvdyA+IDApXHJcbiAgICAgICAgICAgICAgICBsZWZ0ID0gTWF0aC5tYXgobGVmdCAtIHJpZ2h0T3ZlcmZsb3csIGNsICsgbWFyZ2luKTtcclxuXHJcbiAgICAgICAgICAgIHQuY3NzKHtcclxuICAgICAgICAgICAgICAgICdsZWZ0JzogbGVmdCArICdweCcsXHJcbiAgICAgICAgICAgICAgICAnbWF4LXdpZHRoJzogKGNyIC0gbGVmdCAtIG1hcmdpbikgKyAncHgnXHJcbiAgICAgICAgICAgIH0pLmZpbmQoJy50aXAnKVxyXG4gICAgICAgICAgICAgICAgLmNzcygnbGVmdCcsIG9mZnNldC5sZWZ0ICsgZS5vdXRlcldpZHRoKCkgLyAyIC0gbGVmdCArICdweCcpO1xyXG5cclxuICAgICAgICAgICAgLy9TZXR0aW5nIHdpZHRoIGNhbiBtYWtlIGhlaWdodCB2YXJ5LiBTbyB3ZSBzZXQgdmVydGljYWwgcG9zaXRpb24gYWZ0ZXIuXHJcbiAgICAgICAgICAgIHZhciBoID0gdC5vdXRlckhlaWdodCgpO1xyXG4gICAgICAgICAgICB0LmNzcygndG9wJywgby5wb3NpdGlvbiA9PSAndG9wJ1xyXG4gICAgICAgICAgICAgICAgPyBvZmZzZXQudG9wIC0gaCAtIG8uZGlzdGFuY2VcclxuICAgICAgICAgICAgICAgIDogb2Zmc2V0LnRvcCArIGUub3V0ZXJIZWlnaHQoKSArIG8uZGlzdGFuY2VcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBjbG9zZSgpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2hvd1RpbWVvdXQpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudG9vbHRpcClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnNvdXJjZSA9PSAnYW5jaG9yJylcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5oaWRlKCkuYXBwZW5kVG8oJ2JvZHknKTtcclxuICAgICAgICAgICAgdGhpcy50b29sdGlwLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldC5kYXRhKCdfdG9vbHRpcCcsIG51bGwpO1xyXG4gICAgICAgICAgICBhY3RpdmVUb29sdGlwcy5zcGxpY2UoYWN0aXZlVG9vbHRpcHMuaW5kZXhPZih0aGlzKSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9