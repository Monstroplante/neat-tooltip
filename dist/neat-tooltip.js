/// <reference path="typings/tsd.d.ts" />
var Tooltip;
(function (_Tooltip) {
    _Tooltip.activeTooltips = [];
    (function (Position) {
        Position[Position["bottom"] = 0] = "bottom";
        Position[Position["top"] = 1] = "top";
    })(_Tooltip.Position || (_Tooltip.Position = {}));
    var Position = _Tooltip.Position;
    (function (Source) {
        //Get tooltip content from title attribute
        Source[Source["title"] = 0] = "title";
        // Get tooltip content from anchor attribute. If anchor starts with #, will searh for element on the page.
        // Else (not yet supported), will load URL
        Source[Source["anchor"] = 1] = "anchor";
    })(_Tooltip.Source || (_Tooltip.Source = {}));
    var Source = _Tooltip.Source;
    (function (ShowOn) {
        ShowOn[ShowOn["hover"] = 0] = "hover";
        ShowOn[ShowOn["click"] = 1] = "click";
    })(_Tooltip.ShowOn || (_Tooltip.ShowOn = {}));
    var ShowOn = _Tooltip.ShowOn;
    function close() {
        for (var i = 0; i < _Tooltip.activeTooltips.length; i++)
            _Tooltip.activeTooltips[i].close();
    }
    //Indicates if a jquery set contains a given DOM node
    function $contains(e, elem, includeSelf) {
        if (includeSelf === void 0) { includeSelf = true; }
        for (var i = 0; i < e.length; i++) {
            if ((includeSelf && e.get(i) == elem) || $.contains(e.get(i), elem))
                return true;
        }
        return false;
    }
    ;
    (function ($) {
        //Display a tooltip once
        $.fn.showTooltip = function (options) {
            return this.each(function () {
                new Tooltip(this, options);
            });
        };
        //Display a tooltip once
        $.fn.closeTooltip = function (options) {
            return this.each(function () {
                var t = $(this).data('tooltip');
                if (t)
                    t.close();
            });
        };
        //Bind tooltip display to event
        $.fn.tooltip = function (options, showOn) {
            if (showOn === void 0) { showOn = 0 /* hover */; }
            if (showOn == 0 /* hover */) {
                var show = function () {
                    $(this).showTooltip(options);
                };
                this.hover(show, function () {
                    $(this).closeTooltip();
                }).click(show);
            }
            else if (showOn == 1 /* click */) {
                this.click(function () {
                    var e = $(this);
                    console.log(e.data('tooltip'));
                    if (e.data('tooltip'))
                        e.closeTooltip();
                    else
                        e.showTooltip(options);
                    return false;
                });
            }
            return this;
        };
        //Hide tooltip on click outside target element and popup
        $('html').click(function (ev) {
            for (var i = 0; i < _Tooltip.activeTooltips.length; i++) {
                var t = _Tooltip.activeTooltips[i];
                var $active = t.tooltip.add(t.target);
                if (t && !$contains($active, ev.target))
                    t.close();
            }
        });
        $(window).resize(function () {
            for (var i = 0; i < _Tooltip.activeTooltips.length; i++) {
                _Tooltip.activeTooltips[i].position();
            }
        });
    })(jQuery);
    var Tooltip = (function () {
        function Tooltip(targetElem, options) {
            var _this = this;
            this.targetElem = targetElem;
            this.options = options;
            this.closeCallback = function () {
                _this.close();
                return false;
            };
            this.options = $.extend({
                position: 0 /* bottom */,
                source: 0 /* title */,
                cssClass: '',
                closeSelector: '.tooltip-close',
                distance: 5
            }, options);
            this.target = $(targetElem).addClass('has-tooltip').closeTooltip().data('tooltip', this);
            this.show();
        }
        Tooltip.prototype.getContent = function () {
            var c = this.options.content;
            if (c) {
                c = $.isFunction(c) ? c() : c;
                return typeof c == 'string' ? $('<div>').html(c) : $(c);
            }
            if (this.options.source == 0 /* title */) {
                var title = this.target.attr('title') || this.target.data('title');
                this.target.attr('title', '').data('title', title);
                return $('<div>').html(title);
            }
            if (this.options.source == 1 /* anchor */) {
                var content = $(this.target.attr('href'));
                return content.length ? content : null;
            }
        };
        Tooltip.prototype.toggle = function () {
            if (this.tooltip)
                this.close();
            else
                this.show();
        };
        Tooltip.prototype.show = function () {
            this.content = this.getContent();
            if (!this.content)
                return;
            this.content.off('click', this.closeCallback).on('click', this.options.closeSelector, this.closeCallback);
            var o = this.options;
            this.tooltip = $('<div class="tooltip-frame"/>').addClass(o.cssClass).addClass('tooltip-' + Position[o.position]).append(this.content.show()).append($('<div class="tip"/>')).appendTo('body');
            _Tooltip.activeTooltips.push(this);
            this.position();
        };
        Tooltip.prototype.position = function () {
            var margin = 10;
            var t = this.tooltip;
            var e = this.target;
            var o = this.options;
            if (!t)
                return;
            //Reset so dimentions calculations are correct
            t.removeAttr('style');
            var offset = e.offset();
            var ww = $(window).width();
            var w = t.outerWidth();
            var left = offset.left + e.outerWidth() / 2 - w / 2;
            if (left < margin)
                left = margin;
            var rightOverflow = (left + w) - (ww - margin);
            if (rightOverflow > 0)
                left = Math.max(left - rightOverflow, margin);
            t.css({
                'left': left + 'px',
                'max-width': (ww - left - margin) + 'px'
            }).find('.tip').css('left', offset.left + e.outerWidth() / 2 - left + 'px');
            //Setting width can make height vary. So we set vertical position after.
            var h = t.outerHeight();
            t.css('top', o.position == 1 /* top */ ? offset.top - h - o.distance : offset.top + e.outerHeight() + o.distance);
        };
        Tooltip.prototype.close = function () {
            console.log('close22');
            if (!this.tooltip)
                return;
            if (this.options.source == 1 /* anchor */)
                this.content.hide().appendTo('body');
            this.tooltip.remove();
            this.tooltip = null;
            this.target.data('tooltip', null);
            _Tooltip.activeTooltips.splice(_Tooltip.activeTooltips.indexOf(this), 1);
        };
        return Tooltip;
    })();
    _Tooltip.Tooltip = Tooltip;
})(Tooltip || (Tooltip = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5lYXQtdG9vbHRpcC50cyJdLCJuYW1lcyI6WyJUb29sdGlwIiwiVG9vbHRpcC5Qb3NpdGlvbiIsIlRvb2x0aXAuU291cmNlIiwiVG9vbHRpcC5TaG93T24iLCJUb29sdGlwLmNsb3NlIiwiVG9vbHRpcC4kY29udGFpbnMiLCJUb29sdGlwLlRvb2x0aXAiLCJUb29sdGlwLlRvb2x0aXAuY29uc3RydWN0b3IiLCJUb29sdGlwLlRvb2x0aXAuZ2V0Q29udGVudCIsIlRvb2x0aXAuVG9vbHRpcC50b2dnbGUiLCJUb29sdGlwLlRvb2x0aXAuc2hvdyIsIlRvb2x0aXAuVG9vbHRpcC5wb3NpdGlvbiIsIlRvb2x0aXAuVG9vbHRpcC5jbG9zZSJdLCJtYXBwaW5ncyI6IkFBQUEseUNBQXlDO0FBcUJ6QyxJQUFPLE9BQU8sQ0EyTWI7QUEzTUQsV0FBTyxRQUFPLEVBQUMsQ0FBQztJQUNEQSx1QkFBY0EsR0FBY0EsRUFBRUEsQ0FBQ0E7SUFDMUNBLFdBQVlBLFFBQVFBO1FBQUdDLDJDQUFNQTtRQUFFQSxxQ0FBR0E7SUFBQ0EsQ0FBQ0EsRUFBeEJELGlCQUFRQSxLQUFSQSxpQkFBUUEsUUFBZ0JBO0lBQXBDQSxJQUFZQSxRQUFRQSxHQUFSQSxpQkFBd0JBLENBQUFBO0lBQ3BDQSxXQUFZQSxNQUFNQTtRQUNkRSwwQ0FBMENBO1FBQzFDQSxxQ0FBS0E7UUFDTEEsMEdBQTBHQTtRQUMxR0EsMENBQTBDQTtRQUMxQ0EsdUNBQU1BO0lBQ1ZBLENBQUNBLEVBTldGLGVBQU1BLEtBQU5BLGVBQU1BLFFBTWpCQTtJQU5EQSxJQUFZQSxNQUFNQSxHQUFOQSxlQU1YQSxDQUFBQTtJQUNEQSxXQUFZQSxNQUFNQTtRQUFHRyxxQ0FBS0E7UUFBRUEscUNBQUtBO0lBQUNBLENBQUNBLEVBQXZCSCxlQUFNQSxLQUFOQSxlQUFNQSxRQUFpQkE7SUFBbkNBLElBQVlBLE1BQU1BLEdBQU5BLGVBQXVCQSxDQUFBQTtJQUVuQ0EsU0FBU0EsS0FBS0E7UUFDVkksR0FBR0EsQ0FBQUEsQ0FBQ0Es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LENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1lBQ3pDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUN0QkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDcEJBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1lBQ2xDQSx1QkFBY0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsdUJBQWNBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQzNEQSxDQUFDQTtRQUNMTixjQUFDQTtJQUFEQSxDQXJIQU4sQUFxSENNLElBQUFOO0lBckhZQSxnQkFBT0EsR0FBUEEsT0FxSFpBLENBQUFBO0FBQ0xBLENBQUNBLEVBM01NLE9BQU8sS0FBUCxPQUFPLFFBMk1iIiwiZmlsZSI6Im5lYXQtdG9vbHRpcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJ0eXBpbmdzL3RzZC5kLnRzXCIgLz5cclxuXHJcbmludGVyZmFjZSB0b29sdGlwX29wdGlvbnMge1xyXG4gICAgcG9zaXRpb24/OiBUb29sdGlwLlBvc2l0aW9uO1xyXG4gICAgc291cmNlPzogVG9vbHRpcC5Tb3VyY2U7XHJcbiAgICBjc3NDbGFzcz86IHN0cmluZztcclxuICAgIGNsb3NlU2VsZWN0b3I/OiBzdHJpbmc7XHJcbiAgICBkaXN0YW5jZT86IG51bWJlcjtcclxuXHJcbiAgICAvL0NhbiBiZSBhbiBIVE1MIHN0cmluZywgYW4gZWxlbWVudCBvciBhIEpRdWVyeSBvYmplY3RcclxuICAgIC8vQ2FuIGFsc28gYmUgYSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIHNhbWUgdmFsdWUgdHlwZSAodGhpcyByZWZlciB0byB0aGUgdGFyZ2V0IGVsZW1lbnQpLlxyXG4gICAgLy9JZiBzZXQsIHNvdXJjZSBpcyBpZ25vcmVkLlxyXG4gICAgY29udGVudD86IGFueTtcclxufVxyXG5cclxuaW50ZXJmYWNlIEpRdWVyeSB7XHJcbiAgICB0b29sdGlwKG9wdGlvbnM/OiB0b29sdGlwX29wdGlvbnMsIHNob3dPbj86VG9vbHRpcC5TaG93T24pOiBKUXVlcnk7XHJcbiAgICBzaG93VG9vbHRpcChvcHRpb25zPzogdG9vbHRpcF9vcHRpb25zKTogVG9vbHRpcC5Ub29sdGlwO1xyXG4gICAgY2xvc2VUb29sdGlwKCk6IEpRdWVyeTtcclxufVxyXG5cclxubW9kdWxlIFRvb2x0aXAge1xyXG4gICAgZXhwb3J0IHZhciBhY3RpdmVUb29sdGlwczogVG9vbHRpcFtdID0gW107XHJcbiAgICBleHBvcnQgZW51bSBQb3NpdGlvbiB7IGJvdHRvbSwgdG9wIH1cclxuICAgIGV4cG9ydCBlbnVtIFNvdXJjZSB7XHJcbiAgICAgICAgLy9HZXQgdG9vbHRpcCBjb250ZW50IGZyb20gdGl0bGUgYXR0cmlidXRlXHJcbiAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgLy8gR2V0IHRvb2x0aXAgY29udGVudCBmcm9tIGFuY2hvciBhdHRyaWJ1dGUuIElmIGFuY2hvciBzdGFydHMgd2l0aCAjLCB3aWxsIHNlYXJoIGZvciBlbGVtZW50IG9uIHRoZSBwYWdlLlxyXG4gICAgICAgIC8vIEVsc2UgKG5vdCB5ZXQgc3VwcG9ydGVkKSwgd2lsbCBsb2FkIFVSTFxyXG4gICAgICAgIGFuY2hvclxyXG4gICAgfVxyXG4gICAgZXhwb3J0IGVudW0gU2hvd09uIHsgaG92ZXIsIGNsaWNrIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjbG9zZSgpIHtcclxuICAgICAgICBmb3IodmFyIGk9MDsgaTxhY3RpdmVUb29sdGlwcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgYWN0aXZlVG9vbHRpcHNbaV0uY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvL0luZGljYXRlcyBpZiBhIGpxdWVyeSBzZXQgY29udGFpbnMgYSBnaXZlbiBET00gbm9kZVxyXG4gICAgZnVuY3Rpb24gJGNvbnRhaW5zKGU6IEpRdWVyeSwgZWxlbTogSFRNTEVsZW1lbnQsIGluY2x1ZGVTZWxmID0gdHJ1ZSkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoKGluY2x1ZGVTZWxmICYmIGUuZ2V0KGkpID09IGVsZW0pIHx8ICQuY29udGFpbnMoZS5nZXQoaSksIGVsZW0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgKGZ1bmN0aW9uICgkKSB7XHJcblxyXG4gICAgICAgIC8vRGlzcGxheSBhIHRvb2x0aXAgb25jZVxyXG4gICAgICAgICQuZm4uc2hvd1Rvb2x0aXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBuZXcgVG9vbHRpcCh0aGlzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9EaXNwbGF5IGEgdG9vbHRpcCBvbmNlXHJcbiAgICAgICAgJC5mbi5jbG9zZVRvb2x0aXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgdCA9IDxUb29sdGlwPiQodGhpcykuZGF0YSgndG9vbHRpcCcpO1xyXG4gICAgICAgICAgICAgICAgaWYodClcclxuICAgICAgICAgICAgICAgICAgICB0LmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vQmluZCB0b29sdGlwIGRpc3BsYXkgdG8gZXZlbnRcclxuICAgICAgICAkLmZuLnRvb2x0aXAgPSBmdW5jdGlvbiAob3B0aW9ucywgc2hvd09uID0gU2hvd09uLmhvdmVyKSB7XHJcbiAgICAgICAgICAgIGlmIChzaG93T24gPT0gU2hvd09uLmhvdmVyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2hvdyA9IGZ1bmN0aW9uICgpIHsgJCh0aGlzKS5zaG93VG9vbHRpcChvcHRpb25zKSB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ob3ZlcihcclxuICAgICAgICAgICAgICAgICAgICBzaG93LFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCl7JCh0aGlzKS5jbG9zZVRvb2x0aXAoKX1cclxuICAgICAgICAgICAgICAgICkuY2xpY2soc2hvdyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hvd09uID09IFNob3dPbi5jbGljayl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZS5kYXRhKCd0b29sdGlwJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGUuZGF0YSgndG9vbHRpcCcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNsb3NlVG9vbHRpcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zaG93VG9vbHRpcChvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9IaWRlIHRvb2x0aXAgb24gY2xpY2sgb3V0c2lkZSB0YXJnZXQgZWxlbWVudCBhbmQgcG9wdXBcclxuICAgICAgICAkKCdodG1sJykuY2xpY2soZnVuY3Rpb24gKGV2KSB7XHJcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPGFjdGl2ZVRvb2x0aXBzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIHZhciB0OlRvb2x0aXAgPSBhY3RpdmVUb29sdGlwc1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciAkYWN0aXZlID0gdC50b29sdGlwLmFkZCh0LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodCAmJiAhJGNvbnRhaW5zKCRhY3RpdmUsIGV2LnRhcmdldCkpXHJcbiAgICAgICAgICAgICAgICAgICAgdC5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKHdpbmRvdykucmVzaXplKCgpID0+IHtcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8YWN0aXZlVG9vbHRpcHMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcHNbaV0ucG9zaXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSkoalF1ZXJ5KTtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVG9vbHRpcCB7XHJcbiAgICAgICAgcHVibGljIHRvb2x0aXA6IEpRdWVyeTtcclxuICAgICAgICBwdWJsaWMgdGFyZ2V0OiBKUXVlcnk7XHJcbiAgICAgICAgcHVibGljIGNvbnRlbnQ6IEpRdWVyeTtcclxuICAgICAgICBwcml2YXRlIGNsb3NlQ2FsbGJhY2sgPSAoKSA9PiB7IHRoaXMuY2xvc2UoKTsgcmV0dXJuIGZhbHNlOyB9O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhcmdldEVsZW06IEhUTUxFbGVtZW50LCBwcml2YXRlIG9wdGlvbnM6IHRvb2x0aXBfb3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogUG9zaXRpb24uYm90dG9tLFxyXG4gICAgICAgICAgICAgICAgc291cmNlOiBTb3VyY2UudGl0bGUsXHJcbiAgICAgICAgICAgICAgICBjc3NDbGFzczogJycsXHJcbiAgICAgICAgICAgICAgICBjbG9zZVNlbGVjdG9yOiAnLnRvb2x0aXAtY2xvc2UnLFxyXG4gICAgICAgICAgICAgICAgZGlzdGFuY2U6IDUsXHJcbiAgICAgICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSAkKHRhcmdldEVsZW0pLmFkZENsYXNzKCdoYXMtdG9vbHRpcCcpLmNsb3NlVG9vbHRpcCgpLmRhdGEoJ3Rvb2x0aXAnLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5zaG93KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldENvbnRlbnQoKTogSlF1ZXJ5IHtcclxuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLm9wdGlvbnMuY29udGVudDtcclxuICAgICAgICAgICAgaWYgKGMpIHtcclxuICAgICAgICAgICAgICAgIGMgPSAkLmlzRnVuY3Rpb24oYykgPyBjKCkgOiBjO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBjID09ICdzdHJpbmcnID8gICQoJzxkaXY+JykuaHRtbChjKSA6ICQoYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zb3VyY2UgPT0gU291cmNlLnRpdGxlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLnRhcmdldC5hdHRyKCd0aXRsZScpIHx8IHRoaXMudGFyZ2V0LmRhdGEoJ3RpdGxlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5hdHRyKCd0aXRsZScsICcnKS5kYXRhKCd0aXRsZScsIHRpdGxlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkKCc8ZGl2PicpLmh0bWwodGl0bGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc291cmNlID09IFNvdXJjZS5hbmNob3IpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gJCh0aGlzLnRhcmdldC5hdHRyKCdocmVmJykpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQubGVuZ3RoID8gY29udGVudCA6IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB0b2dnbGUoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRvb2x0aXApXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHNob3coKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudCA9IHRoaXMuZ2V0Q29udGVudCgpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFxyXG4gICAgICAgICAgICAgICAgLm9mZignY2xpY2snLCB0aGlzLmNsb3NlQ2FsbGJhY2spXHJcbiAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgdGhpcy5vcHRpb25zLmNsb3NlU2VsZWN0b3IsIHRoaXMuY2xvc2VDYWxsYmFjayk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbyA9IHRoaXMub3B0aW9ucztcclxuXHJcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcCA9ICQoJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWZyYW1lXCIvPicpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3Moby5jc3NDbGFzcylcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygndG9vbHRpcC0nICsgUG9zaXRpb25bby5wb3NpdGlvbl0pXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKHRoaXMuY29udGVudC5zaG93KCkpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXYgY2xhc3M9XCJ0aXBcIi8+JykpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJ2JvZHknKTtcclxuXHJcbiAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXBzLnB1c2godGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBwb3NpdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIG1hcmdpbiA9IDEwO1xyXG5cclxuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnRvb2x0aXA7XHJcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy50YXJnZXQ7XHJcbiAgICAgICAgICAgIHZhciBvID0gdGhpcy5vcHRpb25zO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy9SZXNldCBzbyBkaW1lbnRpb25zIGNhbGN1bGF0aW9ucyBhcmUgY29ycmVjdFxyXG4gICAgICAgICAgICB0LnJlbW92ZUF0dHIoJ3N0eWxlJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gZS5vZmZzZXQoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB3dyA9ICQod2luZG93KS53aWR0aCgpO1xyXG4gICAgICAgICAgICB2YXIgdyA9IHQub3V0ZXJXaWR0aCgpO1xyXG4gICAgICAgICAgICB2YXIgbGVmdCA9IG9mZnNldC5sZWZ0ICsgZS5vdXRlcldpZHRoKCkgLyAyIC0gdyAvIDI7XHJcblxyXG4gICAgICAgICAgICBpZiAobGVmdCA8IG1hcmdpbilcclxuICAgICAgICAgICAgICAgIGxlZnQgPSBtYXJnaW47XHJcbiAgICAgICAgICAgIHZhciByaWdodE92ZXJmbG93ID0gKGxlZnQgKyB3KSAtICh3dyAtIG1hcmdpbik7XHJcbiAgICAgICAgICAgIGlmKHJpZ2h0T3ZlcmZsb3cgPiAwKVxyXG4gICAgICAgICAgICAgICAgbGVmdCA9IE1hdGgubWF4KGxlZnQgLSByaWdodE92ZXJmbG93LCBtYXJnaW4pO1xyXG5cclxuICAgICAgICAgICAgdC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgJ2xlZnQnOiBsZWZ0ICsgJ3B4JyxcclxuICAgICAgICAgICAgICAgICdtYXgtd2lkdGgnOiAod3cgLSBsZWZ0IC0gbWFyZ2luKSArICdweCdcclxuICAgICAgICAgICAgfSkuZmluZCgnLnRpcCcpXHJcbiAgICAgICAgICAgICAgICAuY3NzKCdsZWZ0Jywgb2Zmc2V0LmxlZnQgKyBlLm91dGVyV2lkdGgoKSAvIDIgLSBsZWZ0ICsgJ3B4Jyk7XHJcblxyXG4gICAgICAgICAgICAvL1NldHRpbmcgd2lkdGggY2FuIG1ha2UgaGVpZ2h0IHZhcnkuIFNvIHdlIHNldCB2ZXJ0aWNhbCBwb3NpdGlvbiBhZnRlci5cclxuICAgICAgICAgICAgdmFyIGggPSB0Lm91dGVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIHQuY3NzKCd0b3AnLCBvLnBvc2l0aW9uID09IFBvc2l0aW9uLnRvcFxyXG4gICAgICAgICAgICAgICAgPyBvZmZzZXQudG9wIC0gaCAtIG8uZGlzdGFuY2VcclxuICAgICAgICAgICAgICAgIDogb2Zmc2V0LnRvcCArIGUub3V0ZXJIZWlnaHQoKSArIG8uZGlzdGFuY2VcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBjbG9zZSgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Nsb3NlMjInKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnRvb2x0aXApXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5zb3VyY2UgPT0gU291cmNlLmFuY2hvcilcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5oaWRlKCkuYXBwZW5kVG8oJ2JvZHknKTtcclxuICAgICAgICAgICAgdGhpcy50b29sdGlwLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldC5kYXRhKCd0b29sdGlwJywgbnVsbCk7XHJcbiAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXBzLnNwbGljZShhY3RpdmVUb29sdGlwcy5pbmRleE9mKHRoaXMpLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=