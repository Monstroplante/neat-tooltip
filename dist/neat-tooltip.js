/// <reference path="typings/tsd.d.ts" />
var Tooltip;
(function (_Tooltip) {
    _Tooltip.activeTooltip;
    (function (Position) {
        Position[Position["bottom"] = 0] = "bottom";
        Position[Position["top"] = 1] = "top";
    })(_Tooltip.Position || (_Tooltip.Position = {}));
    var Position = _Tooltip.Position;
    (function (Source) {
        //Get tooltip content from title attribute
        Source[Source["title"] = 0] = "title";
        // Get tooltip content from href attribute. If href starts with #, will searh for element on the page.
        // Else (not yet supported), will load URL
        Source[Source["href"] = 1] = "href";
    })(_Tooltip.Source || (_Tooltip.Source = {}));
    var Source = _Tooltip.Source;
    (function (ShowOn) {
        ShowOn[ShowOn["hover"] = 0] = "hover";
        ShowOn[ShowOn["click"] = 1] = "click";
    })(_Tooltip.ShowOn || (_Tooltip.ShowOn = {}));
    var ShowOn = _Tooltip.ShowOn;
    function close() {
        if (_Tooltip.activeTooltip)
            _Tooltip.activeTooltip.close();
    }
    //Indicates if a jquery set contains a given DOM node
    function $contains($set, elem, includeSelf) {
        if (includeSelf === void 0) { includeSelf = true; }
        var e = this;
        for (var i = 0; i < e.length; i++) {
            if ((includeSelf && e.get(i) == elem) || $.contains(e.get(i), elem))
                return true;
        }
        return false;
    }
    ;
    (function ($) {
        $.fn.tooltip = function (options) {
            options = $.extend({
                position: 0 /* bottom */,
                source: 0 /* title */,
                cssClass: '',
                showOn: 0 /* hover */,
                closeSelector: '.tooltip-close',
                distance: 5
            }, options);
            return this.each(function () {
                var t = new Tooltip(this, options);
            });
        };
        //Hide tooltip on click outside target element and popup
        $('html').click(function (ev) {
            if (!_Tooltip.activeTooltip)
                return;
            var $active = _Tooltip.activeTooltip.tooltip.add(_Tooltip.activeTooltip.target);
            if (_Tooltip.activeTooltip && !$contains($active, ev.target))
                _Tooltip.activeTooltip.close();
        });
        $(window).resize(function () {
            if (_Tooltip.activeTooltip)
                _Tooltip.activeTooltip.position();
        });
    })(jQuery);
    var Tooltip = (function () {
        function Tooltip(targetElem, options) {
            var _this = this;
            this.targetElem = targetElem;
            this.options = options;
            targetElem['tooltip'] = this;
            this.target = $(targetElem).addClass('has-tooltip');
            var that = this;
            if (options.showOn == 0 /* hover */) {
                //Reaffect target to fix bug on cloned elements.
                var show = function () {
                    that.target = $(this);
                    that.show();
                };
                this.target.hover(show, function () { return _this.close(); }).click(show);
            }
            else {
                this.target.click(function () {
                    that.target = $(this);
                    that.toggle();
                    return false;
                });
            }
        }
        Tooltip.prototype.initContent = function () {
            var _this = this;
            if (this.content)
                return;
            if (this.options.source == 0 /* title */) {
                var title = this.target.attr('title');
                if (!title)
                    return;
                this.target.attr('data-title', title).attr('title', '');
                this.content = $('<span/>').html(title);
            }
            else if (this.options.source == 1 /* href */) {
                this.content = $(this.target.attr('href'));
                if (!this.content.length)
                    this.content = null;
            }
            if (this.content)
                this.content.find(this.options.closeSelector).click(function () {
                    _this.close();
                    return false;
                });
        };
        Tooltip.prototype.toggle = function () {
            if (this.tooltip)
                this.close();
            else
                this.show();
        };
        Tooltip.prototype.show = function () {
            this.initContent();
            if (!this.content)
                return;
            if (_Tooltip.activeTooltip)
                _Tooltip.activeTooltip.close();
            var e = this.target;
            var o = this.options;
            var t = this.tooltip = $('<div class="tooltip-frame"/>').addClass(o.cssClass).addClass('tooltip-' + Position[o.position]).append(this.content.show()).append($('<div class="tip"/>')).appendTo('body');
            _Tooltip.activeTooltip = this;
            this.position();
        };
        Tooltip.prototype.position = function () {
            var margin = 10;
            var t = this.tooltip;
            var e = this.target;
            var o = this.options;
            if (!t)
                return;
            //Reset so dimentions calculations are correct
            t.removeAttr('style');
            var offset = e.offset();
            var ww = $(window).width();
            var w = t.outerWidth();
            var left = offset.left + e.outerWidth() / 2 - w / 2;
            if (left < margin)
                left = margin;
            var rightOverflow = (left + w) - (ww - margin);
            if (rightOverflow > 0)
                left = Math.max(left - rightOverflow, margin);
            t.css({
                'left': left + 'px',
                'max-width': (ww - left - margin) + 'px'
            }).find('.tip').css('left', offset.left + e.outerWidth() / 2 - left + 'px');
            //Setting width can make height vary. So we set vertical position after.
            var h = t.outerHeight();
            t.css('top', o.position == 1 /* top */ ? offset.top - h - o.distance : offset.top + e.outerHeight() + o.distance);
        };
        Tooltip.prototype.close = function () {
            if (!this.tooltip)
                return;
            this.content.hide().appendTo('body');
            this.tooltip.remove();
            this.tooltip = null;
            _Tooltip.activeTooltip = null;
        };
        return Tooltip;
    })();
    _Tooltip.Tooltip = Tooltip;
})(Tooltip || (Tooltip = {}));

//# sourceMappingURL=data:application/json;base64,